import java.nio.file.Paths

buildscript {
    if (project == rootProject) {
        repositories {
            google()
            jcenter()
        }
        dependencies {
            classpath("com.android.tools.build:gradle:7.2.1")
        }
    }
}

import groovy.json.JsonSlurper

// https://github.com/callstack/react-native-builder-bob/discussions/359
def registrationCompat = {
  def reactNativeManifest = file("$projectDir/../../node_modules/react-native/package.json").exists()
    ? file("$projectDir/../../node_modules/react-native/package.json") // developer mode, to run example app
    : file("$projectDir/../../../react-native/package.json")
  def reactNativeVersion = new JsonSlurper().parseText(reactNativeManifest.text).version as String
  // Fabric was introduced at react-native@0.68, full CMake support were introduced at react-native@0.71
  // Use Android.mk for compatibility with react-native@0.68/0.69
  reactNativeVersion.matches('(0.68.*|0.69.*)')
}()

def codegenViewLibraryName = "vectordrawable"
def codegenViewModuleName = {
  // Autolink for Fabric uses codegenConfig.name in package.json since react-native@0.70
  // Use codegenViewLibraryName for compatibility with react-native@0.68/0.69
  def libraryManifestJson = new JsonSlurper().parseText(file("$projectDir/../package.json").text)
  registrationCompat ? codegenViewLibraryName : libraryManifestJson.codegenConfig.name
}()


static def findNodeModules(baseDir) {
    def basePath = baseDir.toPath().normalize()
    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
        def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
        if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
            return nodeModulesPath.toString()
        }
        basePath = basePath.getParent()
    }
    throw new GradleException("Unable to locate node_modules")
}

def isNewArchitectureEnabled() {
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: 'com.android.library'
if (isNewArchitectureEnabled()) {
    apply plugin: 'com.facebook.react'
}

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def nodeModules = findNodeModules(projectDir)

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 30)
    buildToolsVersion safeExtGet('buildToolsVersion', "30.0.2")

    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 18)
        targetSdkVersion safeExtGet('targetSdkVersion', 30)
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        buildConfigField "String", "CODEGEN_MODULE_REGISTRATION", (isNewArchitectureEnabled() && registrationCompat ? "\"${codegenViewModuleName}_registration\"" : "null")
        if (isNewArchitectureEnabled() && registrationCompat) {
        def reactAndroidProject = project(':ReactAndroid')
        externalNativeBuild {
            ndkBuild {
            arguments "APP_PLATFORM=android-21",
                        "APP_STL=c++_shared",
                        "NDK_TOOLCHAIN_VERSION=clang",
                        "GENERATED_SRC_DIR=$buildDir/generated/source", // for react_codegen_* in this library's codegen/jni
                        "PROJECT_BUILD_DIR=${appProject.buildDir}", // for REACT_NDK_EXPORT_DIR in ReactAndroid's Android-prebuilt.mk
                        "REACT_ANDROID_DIR=${reactAndroidProject.projectDir}",
                        "REACT_ANDROID_BUILD_DIR=${reactAndroidProject.buildDir}",
                        "CODEGEN_MODULE_NAME=$codegenViewModuleName"
            cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
            cppFlags "-std=c++17"
            targets "${codegenViewModuleName}_registration"
            }
        }
        }
    }
    if (isNewArchitectureEnabled() && registrationCompat) {
        // We configure the NDK build only if you decide to opt-in for the New Architecture.
        externalNativeBuild {
        ndkBuild {
            path "Android.mk"
        }
        }
    }

    packagingOptions {
        // For some reason gradle only complains about the duplicated version of libreact_render libraries
        // while there are more libraries copied in intermediates folder of the lib build directory, we exlude
        // only the ones that make the build fail (ideally we should only include librnscreens_modules but we
        // are only allowed to specify exlude patterns)
        // See: https://github.com/software-mansion/react-native-screens/blob/main/android/build.gradle#L90
        exclude "**/libreact_render*.so"
    }
    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += ['src/fabric/java']
            } else {
                java.srcDirs += ['src/paper/java', 'build/generated/source/codegen/java']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    if (project == rootProject) {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url "$rootDir/../node_modules/react-native/android"
        }
        mavenCentral()
        google()
    }
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

if (isNewArchitectureEnabled()) {
    react {
        jsRootDir = file("../src/")
        libraryName = codegenViewLibraryName
        codegenJavaPackageName = "com.klarna"
        reactNativeDir = rootProject.file("../node_modules/react-native/")
        codegenDir = rootProject.file("../node_modules/react-native-codegen/")
    }
}
